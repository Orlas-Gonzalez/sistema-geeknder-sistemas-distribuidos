import java.net.*;
import java.io.*;
import java.util.*;
public class ftp{
	private static Socket socket;
	private static String command;
	private static DataInputStream netIn; 
	private	static DataOutputStream netOut; 
	private static int countFiles;
	private static String binderClient= "C:/FTP_Usuario";
	
	private static void LS()throws Exception{
		netOut.writeUTF("LS");
		countFiles = Integer.parseInt(netIn.readUTF());
	for (int i = 0; i< countFiles; i++ ) {
		System.out.println(netIn.readUTF());
		}
	}
	
	private static void GET(String input) {
	    try {
			String [] tokens = input.split(" ");
			netOut.writeUTF(tokens[1]);
			byte[] buffer = new byte[1024];
			int lenbuffer = netIn.read(buffer);
			FileOutputStream fos = new FileOutputStream(binderClient + "/" + tokens[1]);
			while(lenbuffer != -1 && lenbuffer ==  1024) {
				fos.write(buffer, 0, lenbuffer);
				lenbuffer = netIn.read(buffer);
				System.out.println("Se cambio con exito");
			}if (lenbuffer < 1024) {
				fos.write(buffer, 0, lenbuffer);
				System.out.println("Se cambio con exito");
			}fos.close();
			} catch (Exception ex) {
	        ex.printStackTrace();
	    }
}
	
	private static void MGET(String input) {
	    try {
			String [] tokens = input.split(" ");
			for (int i=1; i<tokens.length; i++) {
				netOut.writeUTF("MGET");
				netOut.writeUTF(tokens[i]);
				byte[] buffer = new byte[1024];
				int lenbuffer = netIn.read(buffer);
				FileOutputStream fos = new FileOutputStream(binderClient + "/" + tokens[i]);
				while(lenbuffer != -1 && lenbuffer ==  1024) {
					fos.write(buffer, 0, lenbuffer);
					lenbuffer = netIn.read(buffer);
					System.out.println("Se cambio con exito" + tokens[i]);
				}if (lenbuffer < 1024) {
					fos.write(buffer, 0, lenbuffer);
					System.out.println("Se cambio con exito" + tokens[i]);
				}fos.close();
			}
	    }catch (Exception ex) {
	        ex.printStackTrace();
	    }
}
	private static String PUT() {
	    try {

			String nomArchivo=netIn.readUTF();
			File file =new File(binderClient + "/" + nomArchivo);
			if(file.exists()) {
				int lenArchivo = (int)file.length();
				byte [] buffer = new byte[lenArchivo];
				FileInputStream fis = new FileInputStream(binderClient + "/" + nomArchivo);
				fis.read(buffer, 0, lenArchivo);
				fis.close();
				netOut.write(buffer);
				}
			return "Enviado";
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
	  
	return "No enviado";
}
	
	

	
	private static void MPUT(String input) {
	    try {
			String [] tokens = input.split(" ");
			for (int i=1; i<tokens.length; i++) {
	    		netOut.writeUTF("MPUT");
				String nomArchivo=netIn.readUTF();
				File file =new File(binderClient + "/" + nomArchivo);
				if(file.exists()) {
					int lenArchivo = (int)file.length();
					byte [] buffer = new byte[lenArchivo];
					FileInputStream fis = new FileInputStream(binderClient + "/" + nomArchivo);
					fis.read(buffer, 0, lenArchivo);
					fis.close();
					netOut.write(buffer);
					}
		    } 
	   
	    }catch (Exception e) {
	        e.printStackTrace();
	    }
}
	

	public static String LCD(String input) throws IOException {
		File file = new File (binderClient);
		File[] listArchivos = file.listFiles();
		String [] tokens = input.split(" ");
		if (tokens.length == 2 ) {
			if(tokens[1].equals("..")) {
				if(binderClient.equals("C:/FTP_Usuario")) {
					return "Esta en el directorio fuente";
				}else {
					String [] NewDirectory = binderClient.split("/"); 
					binderClient = "";
					System.out.println(NewDirectory.length);
					binderClient=NewDirectory[1]+NewDirectory[2];
				}
			}else {
				for(File archivo : listArchivos) {
					if(archivo.getName().toUpperCase().equals(tokens[1])) {
						if(archivo.isDirectory()) {
							binderClient= binderClient + "/" + tokens[1];
							return "Se cambio de directorio";
						}
					}
				}
			}
		}		
		return "";
}
	
	public static void main(String [] arg) throws Exception{
		try {
			Scanner stdIn= new Scanner(System.in);
			while(true) {	
					System.out.print("ftp :> ");
					command = stdIn.nextLine();
					if (command.toUpperCase().startsWith("OPEN")) {
						String [] tokens = command.split(" ");
						if (tokens.length == 3 ){
							socket = new Socket(tokens[1], Integer.parseInt(tokens[2]));
							netIn = new DataInputStream(socket.getInputStream());
							netOut = new DataOutputStream(socket.getOutputStream());
							System.out.println("Se ha establecido la conexion");
							continue;
						}
					}
					if(command.toUpperCase().equals("LS")) {
						LS();
						continue;
					} 
					if(command.toUpperCase().startsWith("CD")) {
						netOut.writeUTF(command);
						System.out.println(netIn.readUTF());				
						continue;
					} 
					if(command.toUpperCase().startsWith("LCD")) {
						LCD(command);
						System.out.println("Directorio local: " + binderClient);
						continue;
					} 
					if(command.toUpperCase().startsWith("RMDIR")) {
						netOut.writeUTF(command);
						System.out.println(netIn.readUTF());
						continue;
					} 
					if(command.toUpperCase().startsWith("DELETE")) {
						netOut.writeUTF(command);
						System.out.println(netIn.readUTF());
					continue;
					}
					if(command.toUpperCase().startsWith("PWD")) {
						netOut.writeUTF(command);
						System.out.println("El directorio actual es: " + netIn.readUTF());
						continue;
					} 
					if(command.toUpperCase().startsWith("CLOSE")) {
						socket.close();
						System.out.println("Se cerro la conexión");
					}
					if(command.toUpperCase().startsWith("GET")) {
						netOut.writeUTF(command);
						GET(command);
						continue;

					}
					if(command.toUpperCase().startsWith("MGET")) {
						MGET(command);
						continue;
					}
					if(command.toUpperCase().startsWith("PUT")) {
						netOut.writeUTF(command);
						PUT();
						continue;
					}
					if(command.toUpperCase().startsWith("MPUT")) {
						netOut.writeUTF(command);
						MPUT(command);
						continue;
					}
					
					stdIn.close();			
			}
		}catch (IOException e) {
			e.printStackTrace();
		}
	}
}