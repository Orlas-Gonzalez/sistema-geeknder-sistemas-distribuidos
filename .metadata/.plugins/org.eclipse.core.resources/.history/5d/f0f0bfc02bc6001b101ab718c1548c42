import java.net.*;
//import java.nio.file.FileSystems;
//import java.nio.file.Files;
//import java.nio.file.Path;
import java.io.*;

public class Sevidor{
	private ServerSocket welcomeSocket;
	private static DataInputStream netIn;
	private static DataOutputStream netOut;
	private final int PORT = 8081;
	private String peticion = "";
	private static String binder= "C:/FTP";
	
	
	public void getDIR() {
		try {
			File file = new File (binder);
			File[] listArchivos = file.listFiles();
			netOut.writeUTF(String.valueOf(listArchivos.length));
			for(File archivo : listArchivos) {
				if(archivo.isDirectory()) {
					netOut.writeUTF("  <Dir>    " + archivo.getName());
				}else {
					netOut.writeUTF("  <File>   "+ archivo.getName());
				}
			}
			
		}catch (IOException ioe) {
			ioe.printStackTrace();
		}
	}
	public String CD(String input) throws IOException {
			File file = new File (binder);
			File[] listArchivos = file.listFiles();
			String [] tokens = input.split(" ");
			if (tokens.length == 2 ) {
				if(tokens[1].equals("..")) {
					if(binder.equals("C:/FTP")) {
						return "Esta en el directorio fuente";
					}else {
						String [] NewDirectory = binder.split("/"); 
						binder = "";
						System.out.println(NewDirectory.length);
						binder=NewDirectory[1]+NewDirectory[2];
					/*	for(int i=0; i<NewDirectory.length; i++ ) {                     // corregir
							binder=binder + NewDirectory[i];
							return "Se cambio de directorio";
						} */
					}
				}else {
					for(File archivo : listArchivos) {
						if(archivo.getName().toUpperCase().equals(tokens[1])) {
							if(archivo.isDirectory()) {
								binder= binder + "/" + tokens[1];
								return "Se cambio de directorio";
							}
						}
					}
				}	
			}
			return "Error no se pudo cambiar";
	}
	
	private String Delete(String input) {
		String [] tokens = input.split(" ");
		File file = new File (binder + "/" + tokens[1]);
		if(file.exists()) {
			if(file.delete()) {
				return "Eliminado con exito";
			}
		}
		return "El archivo no existe";
	}
	
	private String RMDIR(String input) {
		String [] tokens = input.split(" ");
		File file = new File (binder + "/" + tokens[1]);
		File[] listArchivos = file.listFiles();
		System.out.println(file);
		if(file.exists()) {
			
			if(listArchivos.length == 0) {
				if(file.delete()) {
					return "Eliminado con exito";
				}
			}
		}
		return "El archivo no existe o no se puede eliminar";
	}
	
	private String GET() {
		    try {
				String nomArchivo=netIn.readUTF();
				File file =new File(binder + "/" + nomArchivo);
				if(file.exists()) {
					int lenArchivo = (int)file.length();
					byte [] buffer = new byte[lenArchivo];
					FileInputStream fis = new FileInputStream(binder + "/" + nomArchivo);
					fis.read(buffer, 0, lenArchivo);
					fis.close();
					netOut.write(buffer);
					}
				return "Enviado";
		    } catch (Exception e) {
		        e.printStackTrace();
		    }
		return "No enviado";
	}
	private String MGET() {
	    try {
			String nomArchivo=netIn.readUTF();
			File file =new File(binder + "/" + nomArchivo);
			if(file.exists()) {
				int lenArchivo = (int)file.length();
				byte [] buffer = new byte[lenArchivo];
				FileInputStream fis = new FileInputStream(binder + "/" + nomArchivo);
				fis.read(buffer, 0, lenArchivo);
				fis.close();
				netOut.write(buffer);
				}
			return "Enviado";
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
	return "No enviado";
   }
	
	
	public String PWD() {
		String [] tokens = binder.split("/");
		String binder_Actual =  tokens [tokens.length-1];
		return binder_Actual;
	}
	private static void PUT(String input) {
	    try {
			String [] tokens = input.split(" ");
			netOut.writeUTF(tokens[1]);
			byte[] buffer = new byte[1024];
			int lenbuffer = netIn.read(buffer);
			FileOutputStream fos = new FileOutputStream(binder + "/" + tokens[1]);
			while(lenbuffer != -1 && lenbuffer ==  1024) {
				fos.write(buffer, 0, lenbuffer);
				lenbuffer = netIn.read(buffer);
				System.out.println("Se cambio con exito");
			}if (lenbuffer < 1024) {
				fos.write(buffer, 0, lenbuffer);
				System.out.println("Se cambio con exito");
			}fos.close();
			} catch (Exception ex) {
	        ex.printStackTrace();
	    }
}
	
	private static void MPUT(String input) {
	    try {
			String [] tokens = input.split(" ");
			for (int i=1; i<tokens.length; i++) {
			netOut.writeUTF(tokens[i]);
			byte[] buffer = new byte[1024];
			int lenbuffer = netIn.read(buffer);
			FileOutputStream fos = new FileOutputStream(binder + "/" + tokens[i]);
			while(lenbuffer != -1 && lenbuffer ==  1024) {
				fos.write(buffer, 0, lenbuffer);
				lenbuffer = netIn.read(buffer);
				System.out.println("Se cambio con exito");
			}if (lenbuffer < 1024) {
				fos.write(buffer, 0, lenbuffer);
				System.out.println("Se cambio con exito");
			}fos.close();
			} 
			}catch (Exception ex) {
		        ex.printStackTrace();
	    }
	}


	
	public void ServerUp() {
		try {
			welcomeSocket = new ServerSocket(PORT);
			System.out.println("Servidor activo y esperando peticiones");
		}catch (IOException e) {
			e.printStackTrace();
			System.out.print("No se pudo abrir el servidor");
		}
		try {
		Socket socket = welcomeSocket.accept();
		System.out.println("Conexion: " + socket);
		netIn = new DataInputStream(socket.getInputStream());
		netOut = new DataOutputStream(socket.getOutputStream()); 
	
		while(true) {	
				peticion = netIn.readUTF();
				System.out.println("Peticion: "+ peticion);
				if (peticion.toUpperCase().equals("LS")) {
					getDIR();
					continue;
				}if (peticion.toUpperCase().startsWith("CD")) {
					netOut.writeUTF(CD(peticion.toUpperCase()));
					continue;
				}if (peticion.toUpperCase().startsWith("DELETE")) {
					netOut.writeUTF(Delete(peticion.toUpperCase()));
					continue;
				}
				if (peticion.toUpperCase().equals("PWD")) {
					netOut.writeUTF(PWD());
					continue;
				}
				if(peticion.toUpperCase().startsWith("RMDIR")) {
					netOut.writeUTF(RMDIR(peticion.toUpperCase()));
					continue;
				} 
				if(peticion.toUpperCase().startsWith("GET")) {
					GET();
					continue;
				}

				if(peticion.toUpperCase().startsWith("MGET")) {
					MGET();
					continue;
				}if(peticion.toUpperCase().startsWith("PUT")) {
					PUT(peticion.toUpperCase());
					continue;
				}if(peticion.toUpperCase().startsWith("MPUT")) {
					MPUT(peticion.toUpperCase());
					continue;
				}
				
			} 
		}catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		Sevidor sftp= new Sevidor();
		sftp.ServerUp();
	}
}
	
